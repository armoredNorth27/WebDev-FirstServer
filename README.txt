#==========Purpose of Project==========#
	Create a server without using any tools such as express. The server that's created was built from
the ground up by myself without the use of anything such as express. The client side code in client.js was
given to me along with the code in the restaurants folder, and the orderform.html page. I did not create that code. 
Everything else I  made myself from scratch. This project also creates a restaurant ordering webpage, but it is 
meant to also incorporate some client-server architecture. There's a few bugs that I have not yet debugged so it's not
flawless, namely it doesn't calculate the average order total properly, but besides that it works well for 
the most part.

#==========Design Desicions==========#
-My solution was built upon the base code that was provided. The server that I've created stores the restaurants
from the restaurants folder inside of a restaurant object. There's a secondary object that stores the data
necessary to display the requirements in the restaurant statistics page. The server is started only once all
of the data has been initialized. 

-The dropdown list with all restaurants and the actual restaurant menu is generated by getting the necessary
data from the server using GET requests. 

-The user's order is recorded on the server by using a PUT request to send it to the server. The data that's 
being sent contains the keys of all dishes that were ordered along with the name of the restaurant that the 
user sent their order in.

-In order to store and access data on the server, I decided to use key/value pairs. The restaurants inside the
restaurants folder are all objects with a bunch of key/value pairs inside of them, so I decided to continue
using the same method to store all the necessary data on the server(the restaurants themselves and the user's
order). This key/value method allows for some flexibility in how data is stored and accessed.

-The home page and the restaurant statistics page are generated using the pug template engine because I wanted to
get some practice using PUG. The order form webpage was generated using HTML because it was
provided like that, but if I had to design it from scratch, I would use PUG instead. This is because the order
form webpage is dynamic and has a lot of user interaction.

#==========Installation+Running instructions==========#

1 - Navigate to the assignment2 folder through your command propmt
(or whatever shell you want to use, vs code works too)

2 - Run the command "npm install". Let this finish installing before
moving on

3 - Run the command "npm run start". This will start the server

4 - Go to the link "http://localhost:3000/". This will bring you to the
home page of the assignment.

5 - From the home page you can navigate and use the whole website without
needing to do anything externally.